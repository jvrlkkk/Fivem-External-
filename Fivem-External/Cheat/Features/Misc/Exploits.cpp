#include "Exploits.hpp"

#include "../../Options.hpp"

bool TPVehicle = false;
uint64_t TPModelInfo = NULL;
uint64_t TPObject = NULL;
uint64_t TPNavigation = NULL;
Vector3D TPPosition = Vector3D(0, 0, 0);

namespace Cheat
{
	void Noclip(Vector3D CameraPos)
	{
		if (!TPObject)
			return;

		if (!TPModelInfo)
			return;

		static float MagicValue = 0.0f;
		static bool Restoring = false;

		if (!g_Options.Misc.Exploits.LocalPlayer.Noclip || !GetAsyncKeyState(g_Options.Misc.Exploits.LocalPlayer.NoclipBind))
		{
			if (Restoring)
			{
				FrameWork::Memory::WriteMemory(TPModelInfo + 0x2C, MagicValue);
			}

			Restoring = false;
			return;
		}

		if (!Restoring)
		{
			MagicValue = FrameWork::Memory::ReadMemory<float>(TPModelInfo + 0x2C);
			FrameWork::Memory::WriteMemory(TPModelInfo + 0x2C, 0.f);

			Restoring = true;
		}

		auto Speed = static_cast<float>(g_Options.Misc.Exploits.LocalPlayer.NoclipSpeed) / 100.f;

		if (GetAsyncKeyState(VK_SHIFT))
		{
			Speed *= 4.f;
		}

		Vector3D NewPosition = TPPosition;

		if (GetAsyncKeyState('W'))
		{
			NewPosition.x += (CameraPos * Speed).x;
			NewPosition.y += (CameraPos * Speed).y;
			NewPosition.z += (CameraPos * Speed).z;
		}

		if (GetAsyncKeyState('S'))
		{
			NewPosition.x -= (CameraPos * Speed).x;
			NewPosition.y -= (CameraPos * Speed).y;
			NewPosition.z -= (CameraPos * Speed).z;
		}

		Vector3D Right = CameraPos.Cross(Vector3D(0, 0, 1));

		if (GetAsyncKeyState('A'))
		{
			NewPosition.x -= (Right * Speed).x;
			NewPosition.y -= (Right * Speed).y;
			NewPosition.z -= (Right * Speed).z;
		}

		if (GetAsyncKeyState('D'))
		{
			NewPosition.x += (Right * Speed).x;
			NewPosition.y += (Right * Speed).y;
			NewPosition.z += (Right * Speed).z;
		}

		if (GetAsyncKeyState(VK_SPACE))
		{
			NewPosition.z += (Speed);
		}

		if (GetAsyncKeyState(VK_LCONTROL))
		{
			NewPosition.z -= (Speed);
		}

		g_Fivem.TeleportObject(TPObject, TPNavigation, 0, NewPosition, NewPosition, false);
	}

	void Exploits::TeleportToWaypoint()
	{
		for (int i = 0; i < 2000; i++)
		{
			uint64_t Blip = FrameWork::Memory::ReadMemory<uint64_t>(g_Fivem.GetBlipListAddress() + (i * 8));
			if (!Blip)
				continue;

			int BlipIcon = FrameWork::Memory::ReadMemory<int>(Blip + 0x40);
			int BlipColor = FrameWork::Memory::ReadMemory<int>(Blip + 0x48);

			if ((BlipColor != BlipColor::ColorWaypoint) || (BlipIcon != BlipSprite::SpriteWaypoint))
				continue;

			Vector2D WaypointPos = FrameWork::Memory::ReadMemory<Vector2D>(Blip + 0x10);

			if (WaypointPos.x != 0 && WaypointPos.y != 0)
			{
				uint64_t Object = NULL;
				uint64_t Navigation = NULL;
				uint64_t ModelInfo = NULL;

				if (g_Fivem.GetLocalPlayerInfo().Ped->HasConfigFlag(CPED_CONFIG_FLAG_InVehicle))
				{
					CVehicle* Vehicle = g_Fivem.GetLocalPlayerInfo().Ped->GetLastVehicle();
					if (Vehicle)
					{
						Object = (uint64_t)Vehicle;
						Navigation = Vehicle->GetNavigation();
						ModelInfo = Vehicle->GetModelInfo();
					}
				}

				if (!Object || !Navigation || !ModelInfo)
				{
					Object = (uint64_t)g_Fivem.GetLocalPlayerInfo().Ped;
					Navigation = g_Fivem.GetLocalPlayerInfo().Ped->GetNavigation();
					ModelInfo = g_Fivem.GetLocalPlayerInfo().Ped->GetModelInfo();
				}

				Vector3D TeleportPos = Vector3D(WaypointPos.x, WaypointPos.y, -210.f);

				g_Fivem.TeleportObject(Object, Navigation, ModelInfo, TeleportPos, TeleportPos, true);
			}
		}
	}

	void Exploits::RunThread()
	{
		while (!g_Options.General.ShutDown)
		{
			std::this_thread::sleep_for(std::chrono::milliseconds(1 + g_Options.General.ThreadDelay));

			if (!g_Fivem.GetLocalPlayerInfo().Ped)
				continue;

			//g_Fivem.GetLocalPlayerInfo().Ped->SetInvencible(g_Options.Misc.Exploits.LocalPlayer.God);

			if (g_Options.Misc.Exploits.LocalPlayer.Start_Health)
			{
				g_Fivem.GetLocalPlayerInfo().Ped->SetHealth(g_Options.Misc.Exploits.LocalPlayer.health_ammount);

				g_Options.Misc.Exploits.LocalPlayer.Start_Health = false;
			}

			if (g_Options.Misc.Exploits.LocalPlayer.God)
			{
				g_Fivem.GetLocalPlayerInfo().Ped->godmode_on(g_Options.Misc.Exploits.LocalPlayer.God);
			}
			if (!g_Options.Misc.Exploits.LocalPlayer.God)
			{
				g_Fivem.GetLocalPlayerInfo().Ped->godmode_off(g_Options.Misc.Exploits.LocalPlayer.God);
			}

			if (g_Options.Misc.Exploits.LocalPlayer.SemiGod)
			{
				static float MaxHealth = g_Fivem.GetLocalPlayerInfo().Ped->GetMaxHealth();
				g_Fivem.GetLocalPlayerInfo().Ped->SetHealth(MaxHealth);
			}

			auto Vehicle = (uint64_t)g_Fivem.GetLocalPlayerInfo().Ped->GetLastVehicle();
			if (Vehicle)
			{
				auto VehDriver = ((CVehicle*)Vehicle)->GetDriver();
				if (VehDriver == (uint64_t)g_Fivem.GetLocalPlayerInfo().Ped)
				{
					TPVehicle = true;
					TPModelInfo = ((CVehicle*)Vehicle)->GetModelInfo();
					TPObject = Vehicle;
					TPNavigation = ((CVehicle*)Vehicle)->GetNavigation();
					TPPosition = ((CVehicle*)Vehicle)->GetCoordinate();
				}
				else
				{
					TPVehicle = false;
				}
			}

			if (!TPVehicle)
			{
				TPModelInfo = g_Fivem.GetLocalPlayerInfo().Ped->GetModelInfo();
				TPObject = (uint64_t)g_Fivem.GetLocalPlayerInfo().Ped;
				TPNavigation = g_Fivem.GetLocalPlayerInfo().Ped->GetNavigation();
				TPPosition = g_Fivem.GetLocalPlayerInfo().Ped->GetCoordinate();
			}

			Noclip(g_Fivem.GetCamGameplayDirector()->GetFollowPedCamera()->GetViewAngles());
		}
	}
}